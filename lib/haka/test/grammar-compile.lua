-- This Source Code Form is subject to the terms of the Mozilla Public
-- License, v. 2.0. If a copy of the MPL was not distributed with this
-- file, You can obtain one at http://mozilla.org/MPL/2.0/.

TestGrammarCompilation = {}

-- XXX dlopen(3) states that:
--     If the same library is loaded again with dlopen(), the same file handle is returned.
-- So be carefull not to name two grammar with the same name
--
-- Also ensure to assert for so file because grammar fallbacks on full lua if compile fails

function TestGrammarCompilation:setUp(test_name)
	os.remove(test_name.."_grammar.c")
	os.remove(test_name.."_grammar.so")
end

function TestGrammarCompilation:test_new_grammar_create_c_file(fname)
	-- Given
	local grammar = function ()
		elem = record{
			field("num", number(8)),
		}:apply(function (value)
			value.ok = true
		end)

		export(elem)
	end

	-- When
	haka.grammar.new(fname, grammar, true)

	-- Then
	local f = assert(io.open(fname.."_grammar.c", "r"))
	local line = f:read("*line")
	assertEquals(line, "/** File automatically generated by Haka. DO NOT EDIT */")
end

function TestGrammarCompilation:test_new_grammar_create_so_module(fname)
	-- Given
	local grammar = function ()
		elem = record{
			field("num", number(8)),
		}:apply(function (value)
			value.ok = true
		end)

		export(elem)
	end

	-- When
	haka.grammar.new(fname, grammar, true)

	-- Then
	assert(io.open(fname.."_grammar.so", "r"))
end

function TestGrammarCompilation:test_new_grammar_create_multiple_parsers(fname)
	-- Given
	local grammar = function ()
		foo = record{
			field("num", number(8)),
		}

		bar = record{
			field("num", number(8)),
		}

		export(foo)
		export(bar)
	end

	-- When
	local grammar = haka.grammar.new(fname, grammar, true)

	-- Then
	assert(io.open(fname.."_grammar.so", "r"))
	assert(grammar.foo)
	assert(grammar.bar)
end

function TestGrammarCompilation:test_apply_on_record(fname)
	-- Given
	local buf = haka.vbuffer_from("\x42")
	local grammar = haka.grammar.new(fname, function ()
		elem = record{
			field("num", number(8)),
		}
		export(elem)
	end, true)

	-- When
	local result = grammar.elem:parse(buf:pos('begin'))

	-- Then
	assert(io.open(fname.."_grammar.so", "r"))
	assertEquals(result.num, 0x42)
end

function TestGrammarCompilation:test_apply_on_sequence(fname)
	-- Given
	local buf = haka.vbuffer_from("\x42\x43")
	local grammar = haka.grammar.new(fname, function ()
		elem = sequence{
			number(8),
			record{
				field("num", number(8)),
			},
		}
		export(elem)
	end, true)

	-- When
	local result = grammar.elem:parse(buf:pos('begin'))

	-- Then
	assert(io.open(fname.."_grammar.so", "r"))
	assertEquals(result.num, 0x43)
end

function TestGrammarCompilation:test_apply_on_union(fname)
	-- Given
	local buf = haka.vbuffer_from("\x42")
	local grammar = haka.grammar.new(fname, function ()
		elem = union{
			field("foo", number(4)),
			field("bar", number(8)),
		}
		export(elem)
	end, true)

	-- When
	local result = grammar.elem:parse(buf:pos('begin'))

	-- Then
	assert(io.open(fname.."_grammar.so", "r"))
	assertEquals(result.foo, 0x4)
	assertEquals(result.bar, 0x42)
end

function TestGrammarCompilation:test_apply_on_branch(fname)
	-- Given
	local buf = haka.vbuffer_from("\x42")
	local grammar = haka.grammar.new(fname, function ()
		my_branch = branch({
			foo = field("num", number(8)),
			bar = field("num", number(4)),
		}, function(result, context)
			return "bar"
		end)

		export(my_branch)
	end, true)

	-- When
	local result = grammar.my_branch:parse(buf:pos('begin'))

	-- Then
	assert(io.open(fname.."_grammar.so", "r"))
	assertEquals(result.num, 0x4)
end

function TestGrammarCompilation:test_apply_on_branch_with_default(fname)
	-- Given
	local buf = haka.vbuffer_from("\x42")
	local grammar = haka.grammar.new(fname, function ()
		my_branch = branch({
			foo = field("num", number(8)),
			default = field("num", number(4)),
		}, function(result, context)
			return "bar"
		end)

		export(my_branch)
	end, true)

	-- When
	local result = grammar.my_branch:parse(buf:pos('begin'))

	-- Then
	assert(io.open(fname.."_grammar.so", "r"))
	assertEquals(result.num, 0x4)
end

function TestGrammarCompilation:test_apply_on_branch_with_multiple_elements(fname)
	-- Given
	local buf = haka.vbuffer_from("\x42")
	local grammar = haka.grammar.new(fname, function ()
		my_branch = branch({
			foo = field("num", number(8)),
			bar = record{
				field("first", number(4)),
				field("second", number(4)),
			}
		}, function(result, context)
			return "bar"
		end)

		export(my_branch)
	end, true)

	-- When
	local result = grammar.my_branch:parse(buf:pos('begin'))

	-- Then
	assert(io.open(fname.."_grammar.so", "r"))
	assertEquals(result.first, 0x4)
	assertEquals(result.second, 0x2)
end

function TestGrammarCompilation:test_apply_on_recurs(fname)
	-- Given
	local buf = haka.vbuffer_from("\x02\x01\x00\x00")
	local done = false
	local grammar = haka.grammar.new(fname, function ()
		define("root")

		root = record{
			field("count", number(8)),
			field("child", array(root)
				:count(function (self, ctx)
					debug.breakpoint()
					return ctx:result(-2).count
				end)
			),
		}

		export(root)
	end, true)

	-- When
	local ret = grammar.root:parse(buf:pos('begin'))

	-- Then
	assert(io.open(fname.."_grammar.so", "r"))
	assertEquals(ret.count, 2)
	assertEquals(ret.child[1].count, 1)
	assertEquals(ret.child[1].child[1].count, 0)
	assertEquals(ret.child[2].count, 0)
end

addTestSuite('TestGrammarCompilation')
