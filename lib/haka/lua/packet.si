/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

%include "haka/lua/swig.si"
%include "haka/lua/packet.si"
%include "haka/lua/object.si"

%{
#include <haka/packet.h>
#include <haka/capture_module.h>
#include <haka/error.h>
#include <haka/timer.h>

bool lua_pushppacket(lua_State *L, struct packet *pkt)
{
	return lua_object_push(L, pkt, &pkt->lua_object, SWIGTYPE_p_packet, 1);
}
%}

%include "haka/lua/ref.si"

%nodefaultctor;
%nodefaultdtor;

%newobject packet::packet;

struct packet {
	%extend {
		struct lua_ref _next_dissector;
		%immutable;
		struct lua_ref data;
		const struct time *timestamp { return packet_timestamp($self); }
		struct vbuffer *payload { return packet_payload($self); }
		int id { return packet_id($self); }
		void *_parent { return NULL; }
		const char *name { return "packet"; }

		packet(int size = 0)
		{
			return packet_new(size);
		}

		~packet()
		{
			if ($self) {
				packet_release($self);
			}
		}

		%rename(send) _send;
		void _send()
		{
			assert($self);

			switch (packet_state($self)) {
			case STATUS_FORGED:
			case STATUS_NORMAL:
				packet_accept($self);
				break;

			case STATUS_SENT:
				error("operation not supported");
				return;

			default:
				assert(0);
				return;
			}
		}

		%rename(inject) _inject;
		void _inject()
		{
			assert($self);

			switch (packet_state($self)) {
			case STATUS_FORGED:
				packet_send($self);
				break;

			case STATUS_NORMAL:
			case STATUS_SENT:
				error("operation not supported");
				return;

			default:
				assert(0);
				return;
			}
		}

		%rename(state) _state;
		const char *_state()
		{
			assert($self);

			switch (packet_state($self)) {
			case STATUS_FORGED: return "forged";
			case STATUS_NORMAL: return "normal";
			case STATUS_SENT:   return "sent";
			default:            assert(0);
			}
		}

		bool issent()
		{
			return packet_state($self) != STATUS_SENT;
		}

		void drop();
	}
};

STRUCT_UNKNOWN_KEY_ERROR(packet);

%{

#define packet_data_get(pkt) _packet_data_get(L, pkt)

struct lua_ref _packet_data_get(lua_State *L, struct packet *packet)
{
	if (!lua_ref_isvalid(&packet->userdata)) {
		lua_newtable(L);
		lua_ref_get(L, &packet->userdata, -1, false);
		lua_pop(L, 1);
	}

	return packet->userdata;
}

struct lua_ref packet__next_dissector_get(struct packet *packet)
{
	return packet->next_dissector;
}

void packet__next_dissector_set(struct packet *packet, struct lua_ref ref)
{
	lua_ref_clear(&packet->next_dissector);
	packet->next_dissector = ref;
}

%}

%rename(capture_mode) _capture_mode;
const char *_capture_mode();

%{
	static const char *_capture_mode()
	{
		enum capture_mode mode = capture_mode();
		switch (mode) {
		case MODE_NORMAL:      return "normal";
		case MODE_PASSTHROUGH: return "passthrough";
		default:               assert(0);
		}
	}
%}

%rename(network_time) _network_time;
const struct time *_network_time();

%{
	static const struct time *_network_time()
	{
		return time_realm_current_time(&network_time);
	}
%}

const char *packet_dissector(struct packet *pkt);

%luacode{
	local this = unpack({...})

	local packet_dissector = haka.dissector.new{
		type = haka.helper.PacketDissector,
		name = 'packet'
	}

	haka.policy {
		on = packet_dissector.policies.next_dissector,
		name = "unknown dissector",
		action = function (policy, ctx, values, desc)
			haka.alert{
				description = string.format("dropping unknown dissector '%s'", values.proto)
			}
			return ctx:drop()
		end
	}

	haka.policy {
		on = packet_dissector.policies.next_dissector,
		name = "unknown protocol",
		proto = "unknown",
		action = haka.policy.accept
	}

	function packet_dissector.method:receive()
		haka.context:signal(self, packet_dissector.events.receive_packet)

		local protocol = this.packet_dissector(self)
		packet_dissector.policies.next_dissector:apply{
			values = {
				proto = protocol or 'unknown'
			},
			ctx = self,
		}
		local next_dissector = self:activate_next_dissector()
		if next_dissector then
			return next_dissector:preceive()
		else
			if self:can_continue() then
				return self:send()
			end
		end
	end

	function packet_dissector:new(pkt)
		return pkt
	end

	function packet_dissector:create(pkt, size)
		return haka.packet(size or 0)
	end

	local packet_send = swig.getclassmetatable('packet')['.fn'].send

	function packet_dissector.method:send()
		haka.context:signal(self, packet_dissector.events.send_packet)
		return packet_send(self)
	end

	function packet_dissector.method:can_continue()
		return self:issent()
	end

	swig.getclassmetatable('packet')['.fn'].send = packet_dissector.method.send
	swig.getclassmetatable('packet')['.fn'].receive = packet_dissector.method.receive
	swig.getclassmetatable('packet')['.fn'].continue = haka.helper.Dissector.method.continue
	swig.getclassmetatable('packet')['.fn'].can_continue = packet_dissector.method.can_continue
	swig.getclassmetatable('packet')['.fn'].error = swig.getclassmetatable('packet')['.fn'].drop
	swig.getclassmetatable('packet')['.fn'].select_next_dissector = packet_dissector.method.select_next_dissector
	swig.getclassmetatable('packet')['.fn'].activate_next_dissector = packet_dissector.method.activate_next_dissector

	function haka.filter(pkt)
		pkt:receive()
	end
}
