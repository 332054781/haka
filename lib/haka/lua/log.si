/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

%{
#include <haka/log.h>

void _message(log_level level, int section, const char *message)
{
	if (check_section_log_level(section, level)) {
		_messagef(level, section, "%s", message);
	}
}

%}

%include "haka/lua/swig.si"

enum log_level { HAKA_LOG_FATAL, HAKA_LOG_ERROR, HAKA_LOG_WARNING, HAKA_LOG_INFO, HAKA_LOG_DEBUG, HAKA_LOG_DEFAULT };

%rename(_check) check_section_log_level;
int check_section_log_level(int section, log_level level);

%rename(_message) _message;
void _message(log_level level, int section, const char *message);

int register_log_section(const char *name);

%rename(_setloglevel) setlevel;
void setlevel(log_level level, const char *section);

%luacode {
	-- Hide internals
	local message = haka._message
	haka._message = nil
	local check = haka._check
	haka._check = nil
	local register = haka.register_log_section
	haka.register_log_section = nil
	local setloglevel = haka._setloglevel
	haka._setloglevel = nil

	local loglevel = {
		fatal = haka.HAKA_LOG_FATAL,
		error = haka.HAKA_LOG_ERROR,
		warning = haka.HAKA_LOG_WARNING,
		info = haka.HAKA_LOG_INFO,
		debug = haka.HAKA_LOG_DEBUG,
		default = haka.HAKA_LOG_DEFAULT,
	}

	haka.HAKA_LOG_FATAL = nil
	haka.HAKA_LOG_ERROR = nil
	haka.HAKA_LOG_WARNING = nil
	haka.HAKA_LOG_INFO = nil
	haka.HAKA_LOG_DEBUG = nil
	haka.HAKA_LOG_DEFAULT = nil

	function haka.setloglevel(level, module)
		local lvl = loglevel[level]
		if not lvl then error(string.format("invalid log level: %s", level)) end

		return setloglevel(lvl, module)
	end

	function haka.log_section(name)
		local logf = {}
		local section = register(name)

		for k,v in pairs(loglevel) do
			if k ~= 'default' then
				logf[k] = function (fmt, ...)
					message(v, section, string.format(fmt, ...))
				end
			end
		end

		setmetatable(logf, {
			__call = function(self, fmt, ...) return self.info(fmt, ...) end
		})

		return logf
	end

	haka.log = haka.log_section("external")
}
