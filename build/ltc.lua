-- This Source Code Form is subject to the terms of the Mozilla Public
-- License, v. 2.0. If a copy of the MPL was not distributed with this
-- file, You can obtain one at http://mozilla.org/MPL/2.0/.

local usage = [[
	Usage: precompile input output
]]

if not arg or not #arg == 2 then
  io.stderr:write(usage)
  return
end

local input = assert(io.open(arg[1], "rb"))
local output = assert(io.open(arg[2], "w"))

local content = input:read("*a")
input:close()

function parse(view)
    local c = {[[
context=... or {}
local function include(v, c)
    return template.compile(v)(c or context)
end
local ___,blocks,layout={},blocks or {}
]]}
    local i, s = 1, string.find(view, "{", 1, true)
    while s do
        local t, p, d, z, r = string.sub(view, s + 1, s + 1), s + 2
        if t == "{" then
            local e = string.find(view, "}}", p, true)
            if e then
                d = table.concat{"___[#___+1]=template.escape(", string.sub(view, p, e - 1), ")\n" }
                z = e + 1
            end
        elseif t == "*" then
            local e = (string.find(view, "*}", p, true))
            if e then
                d = table.concat{"___[#___+1]=template.output(", string.sub(view, p, e - 1), ")\n" }
                z = e + 1
            end
        elseif t == "%" then
            local e = string.find(view, "%}", p, true)
            if e then
                local n = e + 2
                if string.sub(view, n, n) == "\n" then
                    n = n + 1
                end
                d = table.concat{string.sub(view, p, e - 1), "\n" }
                z, r = n - 1, true
            end
        elseif t == "(" then
            local e = string.find(view, ")}", p, true)
            if e then
                local f = string.sub(view, p, e - 1)
                local x = (string.find(f, ",", 2, true))
                if x then
                    d = table.concat{"___[#___+1]=include([=[", string.sub(f, 1, x - 1), "]=],", string.sub(f, x + 1), ")\n"}
                else
                    d = table.concat{"___[#___+1]=include([=[", f, "]=])\n" }
                end
                z = e + 1
            end
        elseif t == "[" then
            local e = string.find(view, "]}", p, true)
            if e then
                d = table.concat{"___[#___+1]=include(", string.sub(view, p, e - 1), ")\n" }
                z = e + 1
            end
        elseif t == "-" then
            local e = string.find(view, "-}", p, true)
            if e then
                local x, y = string.find(view, string.sub(view, s, e + 1), e + 2, true)
                if x then
                    y = y + 1
                    x = x - 1
                    if string.sub(view, y, y) == "\n" then
                        y = y + 1
                    end
                    if string.sub(view, x, x) == "\n" then
                        x = x - 1
                    end
                    d = table.concat{'blocks["', string.sub(view, p, e - 1), '"]=include[=[', string.sub(view, e + 2, x), "]=]\n"}
                    z, r = y - 1, true
                end
            end
        elseif t == "#" then
            local e = string.find(view, "#}", p, true)
            if e then
                e = e + 2
                if string.sub(view, e, e) == "\n" then
                    e = e + 1
                end
                d = ""
                z, r = e - 1, true
            end
        end
        if d then
            c[#c+1] = table.concat{"___[#___+1]=[=[\n", string.sub(view, i, r and rpos(view, s - 1) or s - 1), "]=]\n" }
            if d ~= "" then
                c[#c+1] = d
            end
            s, i = z, z + 1
        end
        s = string.find(view, "{", s + 1, true)
    end
    c[#c+1] = table.concat{"___[#___+1]=[=[\n", string.sub(view, i), "]=]\n"}
    c[#c+1] = "return template.concat(___)"
    return table.concat(c)
end

-- Create precompiled file
output:write[[
-- File autogenerated by haka. DO NOT EDIT.

local template = require("template")
local module = {}

function module.render(...)

]]

output:write(parse(content))

output:write[[


end

local mt = {
	__index = function(t, k)
		return t.context[k] or t.template[k] or _G[k]
	end
}
local env = setmetatable({ template = template }, mt)
debug.setfenv(module.render, env)

return module
]]
