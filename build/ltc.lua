-- This Source Code Form is subject to the terms of the Mozilla Public
-- License, v. 2.0. If a copy of the MPL was not distributed with this
-- file, You can obtain one at http://mozilla.org/MPL/2.0/.

local usage = [[
	Usage: precompile input output
]]

if not arg or not #arg == 2 then
  io.stderr:write(usage)
  return
end

local input = assert(io.open(arg[1], "rb"))
local output = assert(io.open(arg[2], "w"))

local content = input:read("*a")
input:close()

function parse(view)
	local c = {[[
	context=... or {}
	local ___,blocks,layout={},blocks or {}
	]]}
	local i, s = 1, string.find(view, "{", 1, true)
	while s do
		local t, p, d, z, r = string.sub(view, s + 1, s + 1), s + 2
		if t == "{" then
			local e = string.find(view, "}}", p, true)
			if e then
				d = table.concat{"___[#___+1]=", string.sub(view, p, e - 1), "\n" }
				z = e + 1
			end
		elseif t == "*" then
			local e = (string.find(view, "*}", p, true))
			if e then
				d = table.concat{"___[#___+1]=", string.sub(view, p, e - 1), "\n" }
				z = e + 1
			end
		elseif t == "%" then
			local e = string.find(view, "%}", p, true)
			if e then
				local n = e + 2
				if string.sub(view, n, n) == "\n" then
					n = n + 1
				end
				d = table.concat{string.sub(view, p, e - 1), "\n" }
				z, r = n - 1, true
			end
		elseif t == "#" then
			local e = string.find(view, "#}", p, true)
			if e then
				e = e + 2
				if string.sub(view, e, e) == "\n" then
					e = e + 1
				end
				d = ""
				z, r = e - 1, true
			end
		end
		if d then
			c[#c+1] = table.concat{"___[#___+1]=[=[\n", string.sub(view, i, r and rpos(view, s - 1) or s - 1), "]=]\n" }
			if d ~= "" then
				c[#c+1] = d
			end
			s, i = z, z + 1
		end
		s = string.find(view, "{", s + 1, true)
	end
	c[#c+1] = table.concat{"___[#___+1]=[=[\n", string.sub(view, i), "]=]\n"}
	c[#c+1] = "return table.concat(___)"
	return table.concat(c)
end

-- Create precompiled file
output:write[[
-- File autogenerated by haka. DO NOT EDIT.

local module = {}

function module.render(...)

]]

output:write(parse(content))

output:write[[


end

local mt = {
	__index = function(t, k)
		return t.context[k] or _G[k]
	end
}
local env = setmetatable({}, mt)
debug.setfenv(module.render, env)

return module
]]
