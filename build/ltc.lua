-- Copyright (c) 2014, 2015 Aapo Talvensaari
-- All rights reserved.
--
-- Redistribution and use in source and binary forms, with or without modification,
-- are permitted provided that the following conditions are met:
--
-- * Redistributions of source code must retain the above copyright notice, this
--   list of conditions and the following disclaimer.
-- * Redistributions in binary form must reproduce the above copyright notice, this
--   list of conditions and the following disclaimer in the documentation and/or
--   other materials provided with the distribution.
-- * Neither the name of the {organization} nor the names of its
--   contributors may be used to endorse or promote products derived from
--   this software without specific prior written permission.
--
-- THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
-- ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
-- WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
-- DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
-- ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
-- (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
-- LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
-- ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
-- (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
-- SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

local usage = [[
Usage: precompile input output
]]

if not arg or not #arg == 2 then
	io.stderr:write(usage)
	return
end

local input = assert(io.open(arg[1], "rb"))
local output = assert(io.open(arg[2], "w"))

local content = input:read("*a")
input:close()

local function rpos(view, s)
	while s > 0 do
		local c = string.sub(view, s, s)
		if c == " " or c == "\t" or c == "\0" or c == "\x0B" then
			s = s - 1
		else
			break;
		end
	end
	return s
end

function parse(view)
	local c = {[[
	context=... or {}
	local ___,blocks,layout={},blocks or {}
	]]}
	local i, s = 1, string.find(view, "{", 1, true)
	while s do
		local t, p, d, z, r = string.sub(view, s + 1, s + 1), s + 2
		if t == "{" then
			local e = string.find(view, "}}", p, true)
			if e then
				d = table.concat{"___[#___+1]=tostring(", string.sub(view, p, e - 1), ")\n" }
				z = e + 1
			end
		elseif t == "*" then
			local e = (string.find(view, "*}", p, true))
			if e then
				d = table.concat{"___[#___+1]=", string.sub(view, p, e - 1), "\n" }
				z = e + 1
			end
		elseif t == "%" then
			local e = string.find(view, "%}", p, true)
			if e then
				local n = e + 2
				if string.sub(view, n, n) == "\n" then
					n = n + 1
				end
				d = table.concat{string.sub(view, p, e - 1), "\n" }
				z, r = n - 1, true
			end
		elseif t == "#" then
			local e = string.find(view, "#}", p, true)
			if e then
				e = e + 2
				if string.sub(view, e, e) == "\n" then
					e = e + 1
				end
				d = ""
				z, r = e - 1, true
			end
		end
		if d then
			c[#c+1] = table.concat{"___[#___+1]=[=[\n", string.sub(view, i, r and rpos(view, s - 1) or s - 1), "]=]\n" }
			if d ~= "" then
				c[#c+1] = d
			end
			s, i = z, z + 1
		end
		s = string.find(view, "{", s + 1, true)
	end
	c[#c+1] = table.concat{"___[#___+1]=[=[\n", string.sub(view, i), "]=]\n"}
	c[#c+1] = "return table.concat(___)"
	return table.concat(c)
end

-- Create precompiled file
output:write[[
-- File autogenerated by haka. DO NOT EDIT.

local module = {}

function module.render(...)

	]]

	output:write(parse(content))

	output:write[[


end

local mt

if _VERSION == "Lua 5.1" then
	mt = {
		__index = function(t, k)
			return t.context[k] or _G[k]
		end
	}
else
	local _ENV = _ENV
	mt = {
		__index = function(t, k)
			return t.context[k] or _ENV[k]
		end
	}
end

local env = setmetatable({}, mt)
debug.setfenv(module.render, env)

return module
]]
