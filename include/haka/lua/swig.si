/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

%{
	#include <haka/error.h>
	#include <haka/lua/lua.h>
	#include <haka/lua/state.h>

	#include <stdlib.h>

	typedef const char *temporary_string;

	/* GCC 4.7 has a problem with some code generated by SWIG and trigger
	 * a warning. We need to disable it in order to compile properly. */
	#pragma GCC diagnostic ignored "-Warray-bounds"
	#pragma GCC diagnostic ignored "-Wreturn-type"

	#undef SWIG_fail
	#undef SWIG_fail_arg
	#undef SWIG_check_num_args

	#define SWIG_fail {SWIG_arg=-1;goto fail;}
	#define SWIG_fail_arg(func_name,argnum,type) \
	  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
	  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
	  SWIG_arg=-1;goto fail;}
	#define SWIG_check_num_args(func_name,a,b) \
	  if (lua_gettop(L)<a || lua_gettop(L)>b) \
	  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
	  SWIG_arg=-1;goto fail;}
	#define SWIG_execfail {SWIG_arg=-2;goto fail;}

	#define SWIG_lua_always(L, a) 1

	#define _STR_TO_WCS(str)   L##str
	#define STR_TO_WCS(str)   _STR_TO_WCS(str)

	/* We need to override SWIG to avoid overriding a struct metatable. We let user dynamically
	 * add Lua function in this metatable. This is going to be lost if it gets overwritten.
	 */
	SWIGINTERN void  SWIG_Lua_class_register_custom(lua_State* L,swig_lua_class* clss)
	{
		/* Check if the metatable is already registered */
		SWIG_Lua_get_class_registry(L);
		lua_getfield(L, -1, clss->name);
		if (!lua_isnil(L, -1)) {
			lua_pop(L, 2);
			return;
		}
		lua_pop(L, 2);

		SWIG_Lua_class_register(L, clss);
	}

	#define SWIG_Lua_class_register SWIG_Lua_class_register_custom
%}

%insert("init") %{
	if (luaL_loadbuffer(L, SWIG_LUACODE, strlen(SWIG_LUACODE), SWIG_name)) {
		luaL_error(L, lua_tostring(L, -1));
		lua_pop(L, 1);
		return;
	}

	lua_pushvalue(L, -2);
	if (lua_pcall(L, 1, 0, 0)) {
		luaL_error(L, lua_tostring(L, -1));
		lua_pop(L, 1);
		return;
	}

	/* Avoid the default swig behavior to be used */
	#define SWIG_Lua_dostring(...)
%}

%exception %{
	const wchar_t *error;
	$action
	if ((error = clear_error())) {
		if (!lua_pushwstring(L, error)) {
			if (!lua_pushwstring(L, clear_error())) {
				lua_pushstring(L, "unknown error");
			}
		}
		SWIG_execfail;
	}
%}

%typemap(out) temporary_string {
	lua_pushstring(L, (const char *)$result); SWIG_arg++;
	free((void*)$result);
}

%typecheck(20000) void *ANY {
	$1 = 1;
}

%typemap(in) void *ANY {
	$1 = (void *)lua_topointer(L, $input);
}

%typecheck(20000) char *KEY {
	$1 = 1;
}

%typemap(in) char *KEY {
	size_t len;
	$1 = (char *)lua_converttostring(L, $input, &len);
}

%define STRUCT_UNKNOWN_KEY_ERROR(type)

%extend type {
	void __getitem(char *KEY);
	void __setitem(char *KEY, void *ANY);
}

%{
void type ## ___getitem(struct type *self, char *KEY) {
	error(L"unknown field '%s'", KEY);
}

void type ## ___setitem(struct type *self, char *KEY, void *ANY) {
	error(L"unknown field '%s'", KEY);
}
%}

%enddef

%include "typemaps.i"

%define APPLY_OUTPUT(type)

	%apply type *OUTPUT { type *OUTPUT1 };
	%apply type *OUTPUT { type *OUTPUT2 };
	%apply type *OUTPUT { type *OUTPUT3 };
	%apply type *OUTPUT { type *OUTPUT4 };
	%apply type *OUTPUT { type *OUTPUT5 };

%enddef

%typemap(in, numinputs=0) const char **OUTPUT (char *temp)
%{ $1 = &temp; %}

%typemap(argout) const char **OUTPUT
%{ lua_pushstring(L, *$1); SWIG_arg++;%}

APPLY_OUTPUT(bool)
APPLY_OUTPUT(const char *)
