/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

%include "haka/lua/buffer.si"
%include "haka/lua/object.si"
%include "haka/lua/swig.si"

LUA_OBJECT(struct stream);

%define BASIC_STREAM(type)

%newobject type::read;

%extend type {
	~type()
	{
		if ($self)
			stream_destroy((struct stream *)$self);
	}

	struct buffer *read()
	{
		const size_t size = stream_available((struct stream *)$self);
		struct buffer *buf = allocate_buffer(size);
		if (!buf) return NULL;

		buf->size = stream_read((struct stream *)$self, buf->data, size);
		if (check_error() || buf->size == 0) {
			free_buffer(buf);
			return NULL;
		}
		return buf;
	}

	struct buffer *read(int size)
	{
		struct buffer *buf = allocate_buffer(size);
		if (!buf) return NULL;

		buf->size = stream_read((struct stream *)$self, buf->data, size);
		if (check_error() || buf->size == 0) {
			free_buffer(buf);
			return NULL;
		}
		return buf;
	}

	int getchar()
	{
		uint8 c;
		if (stream_read((struct stream *)$self, &c, 1) != 1) {
			return -1;
		}
		else {
			return c;
		}
	}

	int advance(int size)
	{
		return stream_read((struct stream *)$self, NULL, size);
	}

	unsigned int available();

	%rename(insert) _insert;
	unsigned int _insert(struct buffer *buf)
	{
		if (!buf) {
			error(L"nil argument");
			return 0;
		}
		return stream_insert((struct stream *)$self, buf->data, buf->size);
	}

	%rename(insert) _insert;
	unsigned int _insert(const char *buf)
	{
		return stream_insert((struct stream *)$self, (const uint8*)buf, strlen(buf));
	}

	unsigned int erase(int size);

	struct stream_mark *mark() {
		return stream_mark($self, false);
	}

	struct stream_mark *mark(bool readonly);
	void unmark(struct stream_mark *mark);
	void seek(struct stream_mark *mark, bool unmark);
}

STRUCT_UNKNOWN_KEY_ERROR(type);

%enddef
