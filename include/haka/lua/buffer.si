/* This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at http://mozilla.org/MPL/2.0/. */

%{
#include <haka/types.h>

struct buffer {
	size_t    allocated_size;
	size_t    size;
	bool      owner:1;     /* True if the data should be freed. */
	bool      internal:1;  /* True if the data have been allocated along with the buffer struct. */
	uint8*    data;
};

struct buffer *allocate_buffer(size_t size)
{
	struct buffer *buf = malloc(sizeof(struct buffer) + size);
	if (!buf) {
		error(L"memory error");
		return NULL;
	}

	buf->allocated_size = size;
	buf->size = size;
	buf->owner = true;
	buf->internal = true;
	buf->data = ((uint8 *)buf) + sizeof(struct buffer);
	return buf;
}

struct buffer *create_buffer(uint8 *data, size_t size, bool own)
{
	struct buffer *buf = malloc(sizeof(struct buffer));
	if (!buf) {
		error(L"memory error");
		return NULL;
	}

	buf->allocated_size = size;
	buf->size = size;
	buf->owner = own;
	buf->internal = false;
	buf->data = data;
	return buf;
}

void free_buffer(struct buffer *buf)
{
	if (buf->owner) {
		if (!buf->internal) {
			free(buf->data);
		}
	}
	free(buf);
}

%}

%include "haka/lua/swig.si"

struct buffer {
	%extend {
		buffer(size_t size)
		{
			return allocate_buffer(size);
		}

		~buffer()
		{
			if ($self)
				free_buffer($self);
		}

		size_t __len(void *dummy)
		{
			return $self->size;
		}

		int __getitem(int index)
		{
			--index;
			if (index < 0 || index >= $self->size) {
				error(L"out-of-bound index");
				return 0;
			}
			return $self->data[index];
		}

		void __setitem(int index, int value)
		{
			--index;
			if (index < 0 || index >= $self->size) {
				error(L"out-of-bound index");
				return;
			}
			$self->data[index] = value;
		}
	}
};
