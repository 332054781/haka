
%include haka/buffer.si

%define BASIC_STREAM(type)
%newobject type::read;
%extend type {
	~type()
	{
		stream_destroy((struct stream *)$self);
	}

	struct buffer *read()
	{
		const size_t size = stream_available((struct stream *)$self);
		struct buffer *buf = allocate_buffer(size);
		if (!buf) return NULL;

		buf->size = stream_read((struct stream *)$self, buf->data, size);
		if (check_error() || buf->size == 0) {
			free_buffer(buf);
			return NULL;
		}
		return buf;
	}

	struct buffer *read(int size)
	{
		struct buffer *buf = allocate_buffer(size);
		if (!buf) return NULL;

		buf->size = stream_read((struct stream *)$self, buf->data, size);
		if (check_error() || buf->size == 0) {
			free_buffer(buf);
			return NULL;
		}
		return buf;
	}

	int getchar()
	{
		uint8 c;
		if (stream_read((struct stream *)$self, &c, 1) != 1) {
			return -1;
		}
		else {
			return c;
		}
	}

	int advance(int size)
	{
		return stream_read((struct stream *)$self, NULL, size);
	}

	unsigned int available();

	%rename(insert) _insert;
	unsigned int _insert(struct buffer *buf)
	{
		return stream_insert((struct stream *)$self, buf->data, buf->size);
	}

	unsigned int erase(int size);

	void mark();
	void unmark();
	void rewind();
}
%enddef
